class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if head is None or head.next is None:
                return False

            slow = fast = head
            while fast.next != None and fast.next.next != None:
                slow = slow.next
                fast = fast.next.next
                if slow == fast:
                    return True
            return False
    
    # Time O(n) and space O(1)
    def hasCycle(self, head: ListNode) -> bool:
        if head is None or head.next is None:
            return False
        
        slow = head
        fast = head.next
        
        while slow != fast:
            if fast == None or fast.next==None:
                return False
            slow = slow.next
            fast = fast.next.next
        return True

# Hash Table: To detect if a list is cyclic, 
# we can check whether a node had been visited before. Time O(n) and space O(n)
  def hasCycle(self, head: ListNode) -> bool:
          seen = set()
          while head:
              if head in seen:
                  return True
              else:
                  seen.add(head)
              head = head.next
          return False
